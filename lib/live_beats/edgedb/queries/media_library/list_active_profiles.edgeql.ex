# AUTOGENERATED: DO NOT MODIFY
# Generated by Elixir client for EdgeDB via `mix edgedb.generate` from
#   `priv/edgedb/edgeql/media_library/list_active_profiles.edgeql`.
defmodule LiveBeats.EdgeDB.MediaLibrary.ListActiveProfiles do
  @query """
  with songs := (
    select Song
    filter .status = SongStatus.playing
    order by .updated_at desc
  )
  select songs.user {
    id,
    username,
    profile_tagline,
    avatar_url,
    external_homepage_url,
  }
  limit <int64>$limit
  """

  @moduledoc """
  Generated module for the EdgeQL query from
    `priv/edgedb/edgeql/media_library/list_active_profiles.edgeql`.

  Query:

  ```edgeql
  #{@query}
  ```
  """

  @typedoc """
  ```edgeql
  std::uuid
  ```
  """
  @type uuid() :: binary()

  @type result() :: [
          %{
            id: uuid(),
            username: String.t(),
            profile_tagline: String.t() | nil,
            avatar_url: String.t() | nil,
            external_homepage_url: String.t() | nil
          }
        ]

  @type keyword_args() :: [{:limit, integer()}]

  @type map_args() :: %{
          limit: integer()
        }

  @type args() :: map_args() | keyword_args()

  @doc """
  Run the query.
  """
  @spec query(
          client :: EdgeDB.client(),
          args :: args(),
          opts :: list(EdgeDB.query_option())
        ) ::
          {:ok, result()}
          | {:error, reason}
        when reason: any()
  def query(client, args, opts \\ []) do
    do_query(client, args, opts)
  end

  @doc """
  Run the query.
  """
  @spec query!(
          client :: EdgeDB.client(),
          args :: args(),
          opts :: list(EdgeDB.query_option())
        ) :: result()
  def query!(client, args, opts \\ []) do
    case do_query(client, args, opts) do
      {:ok, result} ->
        result

      {:error, exc} ->
        raise exc
    end
  end

  @schema [:username, :profile_tagline, :id, :external_homepage_url, :avatar_url]
  defp do_query(client, args, opts) do
    opts = Keyword.merge(opts, __transform_result__: [schema: @schema])
    EdgeDB.query(client, @query, args, opts)
  end
end
