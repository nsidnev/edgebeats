# AUTOGENERATED: DO NOT MODIFY
# Generated by Elixir client for EdgeDB via `mix edgedb.generate` from
#   `priv/edgedb/edgeql/media_library/delete_song.edgeql`.
defmodule LiveBeats.EdgeDB.MediaLibrary.DeleteSong do
  @query """
  with
      song_to_delete := (select <Song><uuid>$song_id),
      updated_positions := (
          update Song
          filter .position > song_to_delete.position
          set {
              position := .position - 1
          }
      )
  delete song_to_delete
  """

  @moduledoc """
  Generated module for the EdgeQL query from
    `priv/edgedb/edgeql/media_library/delete_song.edgeql`.

  Query:

  ```edgeql
  #{@query}
  ```
  """

  @typedoc """
  ```edgeql
  std::uuid
  ```
  """
  @type uuid() :: binary()

  @type result() :: %{}

  @type keyword_args() :: [{:song_id, uuid()}]

  @type map_args() :: %{
          song_id: uuid()
        }

  @type args() :: map_args() | keyword_args()

  @doc """
  Run the query.
  """
  @spec query(
          client :: EdgeDB.client(),
          args :: args(),
          opts :: list(EdgeDB.query_option())
        ) ::
          {:ok, result()}
          | {:error, reason}
        when reason: any()
  def query(client, args, opts \\ []) do
    do_query(client, args, opts)
  end

  @doc """
  Run the query.
  """
  @spec query!(
          client :: EdgeDB.client(),
          args :: args(),
          opts :: list(EdgeDB.query_option())
        ) :: result()
  def query!(client, args, opts \\ []) do
    case do_query(client, args, opts) do
      {:ok, result} ->
        result

      {:error, exc} ->
        raise exc
    end
  end

  defp do_query(client, args, opts) do
    EdgeDB.query_required_single(client, @query, args, opts)
  end
end
