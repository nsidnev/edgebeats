# AUTOGENERATED: DO NOT MODIFY
# Generated by Elixir client for EdgeDB via `mix edgedb.generate` from
#   `priv/edgedb/edgeql/media_library/delete_expired_songs.edgeql`.
defmodule LiveBeats.EdgeDB.MediaLibrary.DeleteExpiredSongs do
  @query """
  with songs := (
    delete Song
    filter
      .inserted_at < cal::to_local_datetime(datetime_current() - <duration>$interval, 'UTC')
        and
      .server_ip = <inet>$server_ip
        and
      .user.username not in array_unpack(<array<str>>$admin_usernames)
  )
  select songs {
    mp3: {
      *
    }
  }
  """

  @moduledoc """
  Generated module for the EdgeQL query from
    `priv/edgedb/edgeql/media_library/delete_expired_songs.edgeql`.

  Query:

  ```edgeql
  #{@query}
  ```
  """

  @typedoc """
  ```edgeql
  std::uuid
  ```
  """
  @type uuid() :: binary()

  @typedoc """
  ```edgeql
  std::duration
  ```
  """
  @type duration() :: Timex.Duration.t() | integer()

  @type result() :: [
          %{
            mp3: %{
              id: uuid(),
              filename: String.t(),
              filepath: String.t(),
              filesize: EdgeDB.ConfigMemory.t(),
              url: String.t()
            }
          }
        ]

  @type keyword_args() :: [
          {:interval, duration()} | {:server_ip, bitstring()} | {:admin_usernames, [String.t()]}
        ]

  @type map_args() :: %{
          interval: duration(),
          server_ip: bitstring(),
          admin_usernames: [String.t()]
        }

  @type args() :: map_args() | keyword_args()

  @doc """
  Run the query.
  """
  @spec query(
          client :: EdgeDB.client(),
          args :: args(),
          opts :: list(EdgeDB.query_option())
        ) ::
          {:ok, result()}
          | {:error, reason}
        when reason: any()
  def query(client, args, opts \\ []) do
    do_query(client, args, opts)
  end

  @doc """
  Run the query.
  """
  @spec query!(
          client :: EdgeDB.client(),
          args :: args(),
          opts :: list(EdgeDB.query_option())
        ) :: result()
  def query!(client, args, opts \\ []) do
    case do_query(client, args, opts) do
      {:ok, result} ->
        result

      {:error, exc} ->
        raise exc
    end
  end

  @schema [mp3: [:url, :id, :filesize, :filepath, :filename]]
  defp do_query(client, args, opts) do
    opts = Keyword.merge(opts, __transform_result__: [schema: @schema])
    EdgeDB.query(client, @query, args, opts)
  end
end
