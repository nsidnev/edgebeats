# AUTOGENERATED: DO NOT MODIFY
# Generated by Elixir client for EdgeDB via `mix edgedb.generate` from
#   `priv/edgedb/edgeql/accounts/get_users.edgeql`.
defmodule LiveBeats.EdgeDB.Accounts.GetUsers do
  @query """
  select User {
    *
  }
  filter .id in array_unpack(<array<uuid>>$user_ids)
  """

  @moduledoc """
  Generated module for the EdgeQL query from
    `priv/edgedb/edgeql/accounts/get_users.edgeql`.

  Query:

  ```edgeql
  #{@query}
  ```
  """

  @typedoc """
  ```edgeql
  std::uuid
  ```
  """
  @type uuid() :: binary()

  @typedoc """
  ```edgeql
  scalar type default::cistr extending std::str
  ```
  """
  @type default__cistr() :: String.t()

  @type result() :: [
          %{
            username: String.t(),
            email: default__cistr(),
            profile_tagline: String.t() | nil,
            avatar_url: String.t() | nil,
            external_homepage_url: String.t() | nil,
            id: uuid(),
            songs_count: integer(),
            inserted_at: NaiveDateTime.t(),
            updated_at: NaiveDateTime.t(),
            name: String.t()
          }
        ]

  @type keyword_args() :: [{:user_ids, [uuid()]}]

  @type map_args() :: %{
          user_ids: [uuid()]
        }

  @type args() :: map_args() | keyword_args()

  @doc """
  Run the query.
  """
  @spec query(
          client :: EdgeDB.client(),
          args :: args(),
          opts :: list(EdgeDB.query_option())
        ) ::
          {:ok, result()}
          | {:error, reason}
        when reason: any()
  def query(client, args, opts \\ []) do
    do_query(client, args, opts)
  end

  @doc """
  Run the query.
  """
  @spec query!(
          client :: EdgeDB.client(),
          args :: args(),
          opts :: list(EdgeDB.query_option())
        ) :: result()
  def query!(client, args, opts \\ []) do
    case do_query(client, args, opts) do
      {:ok, result} ->
        result

      {:error, exc} ->
        raise exc
    end
  end

  @schema [
    :username,
    :updated_at,
    :songs_count,
    :profile_tagline,
    :name,
    :inserted_at,
    :id,
    :external_homepage_url,
    :email,
    :avatar_url
  ]
  defp do_query(client, args, opts) do
    opts = Keyword.merge(opts, __transform_result__: [schema: @schema])
    EdgeDB.query(client, @query, args, opts)
  end
end
