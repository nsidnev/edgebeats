# AUTOGENERATED: DO NOT MODIFY
# Generated by Elixir client for EdgeDB via `mix edgedb.generate` from
#   `priv/edgedb/edgeql/accounts/register_user.edgeql`.
defmodule LiveBeats.EdgeDB.Accounts.RegisterUser do
  @query """
  with
    provider_params := <json>$provider,
    user := (
      insert User {
        username := <str>$username,
        email := <cistr>$email,
        name := <str>$name,
        avatar_url := <str>$avatar_url,
        external_homepage_url := <str>$external_homepage_url,
        profile_tagline := <str>$username ++ "'s beats"
      }
    ),
    identity := (
      insert Identity {
        provider := <str>provider_params["provider"],
        provider_id := <str>provider_params["id"],
        provider_token := <str>provider_params["token"],
        provider_email := <str>provider_params["email"],
        provider_login := <str>provider_params["login"],
        provider_meta := <json>provider_params["meta"],
        user := user,
      }
    )
  select user {
    *
  }
  """

  @moduledoc """
  Generated module for the EdgeQL query from
    `priv/edgedb/edgeql/accounts/register_user.edgeql`.

  Query:

  ```edgeql
  #{@query}
  ```
  """

  @typedoc """
  ```edgeql
  std::uuid
  ```
  """
  @type uuid() :: binary()

  @typedoc """
  ```edgeql
  std::json
  ```
  """
  @type json() :: any()

  @typedoc """
  ```edgeql
  scalar type default::cistr extending std::str
  ```
  """
  @type default__cistr() :: String.t()

  @type result() :: %{
          username: String.t(),
          email: default__cistr(),
          profile_tagline: String.t() | nil,
          avatar_url: String.t() | nil,
          external_homepage_url: String.t() | nil,
          id: uuid(),
          songs_count: integer(),
          inserted_at: NaiveDateTime.t(),
          updated_at: NaiveDateTime.t(),
          name: String.t()
        }

  @type keyword_args() :: [
          {:provider, json()}
          | {:username, String.t()}
          | {:email, default__cistr()}
          | {:name, String.t()}
          | {:avatar_url, String.t()}
          | {:external_homepage_url, String.t()}
        ]

  @type map_args() :: %{
          provider: json(),
          username: String.t(),
          email: default__cistr(),
          name: String.t(),
          avatar_url: String.t(),
          external_homepage_url: String.t()
        }

  @type args() :: map_args() | keyword_args()

  @doc """
  Run the query.
  """
  @spec query(
          client :: EdgeDB.client(),
          args :: args(),
          opts :: list(EdgeDB.query_option())
        ) ::
          {:ok, result()}
          | {:error, reason}
        when reason: any()
  def query(client, args, opts \\ []) do
    do_query(client, args, opts)
  end

  @doc """
  Run the query.
  """
  @spec query!(
          client :: EdgeDB.client(),
          args :: args(),
          opts :: list(EdgeDB.query_option())
        ) :: result()
  def query!(client, args, opts \\ []) do
    case do_query(client, args, opts) do
      {:ok, result} ->
        result

      {:error, exc} ->
        raise exc
    end
  end

  @schema [
    :username,
    :updated_at,
    :songs_count,
    :profile_tagline,
    :name,
    :inserted_at,
    :id,
    :external_homepage_url,
    :email,
    :avatar_url
  ]
  defp do_query(client, args, opts) do
    opts = Keyword.merge(opts, __transform_result__: [schema: @schema])
    EdgeDB.query_required_single(client, @query, args, opts)
  end
end
